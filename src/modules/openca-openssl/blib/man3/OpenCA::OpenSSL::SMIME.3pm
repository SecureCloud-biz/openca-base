.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenSSL::SMIME 3"
.TH OpenSSL::SMIME 3 "2007-11-07" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenCA::OpenSSL::SMIME \- Sign, verify, encrypt and decrypt S/MIME
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    $shell = OpenCA::OpenSSL\->new();
\&    $smime = OpenCA::OpenSSL::SMIME\->new(
\&                 DATA => \e*STDIN,
\&                 SHELL => $shell);
\&    $smime\->sign(CERTIFICATE => $my_x509,
\&                 PRIVATE_KEY => $my_key);
\&    $mime = $msg\->get_mime();
\&    $mime\->smtpsend();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Perl module for handling S/MIME entities: encrypting, decrypting, signing
and verifying. Uses MIME::Entity for easy parsing of complex structures and
optionally for input and output of data.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.SS "new \fI\s-1ARGS\s0\fP"
.IX Subsection "new ARGS"
Creates a new \fIOpenCA::OpenSSL::SMIME\fR object.
If invoked as a instance method, inherits the values of \s-1SHELL, CA_CERTS,
TMPDIR\s0 and \s-1DEBUG\s0 from creator.
.PP
Parameters:
.IP "\s-1SHELL\s0" 4
.IX Item "SHELL"
A blessed reference to an OpenCA::OpenSSL object. Required argument.
.IP "\s-1INFILE\s0" 4
.IX Item "INFILE"
A filename containing \s-1MIME\s0 data to be processed.
.IP "\s-1DATA\s0" 4
.IX Item "DATA"
An array reference, a string or a filehandle (as a reference to a glob), containing 
actual \s-1MIME\s0 data to be processed
.IP "\s-1ENTITY\s0" 4
.IX Item "ENTITY"
A blessed reference to an MIME::Entity object to be processed. One of
\&\s-1DATA\s0 or \s-1ENTITY\s0 should be present.
.IP "\s-1CA_CERTS\s0" 4
.IX Item "CA_CERTS"
Optional list of certificates of CAs for signing and verifying.
.Sp
Accepts a list of blessed references to OpenCA::X509 objects
.IP "\s-1TMPDIR\s0" 4
.IX Item "TMPDIR"
Sets directory to store various temporary files.
.IP "\s-1DEBUG\s0" 4
.IX Item "DEBUG"
Sets debugging on when assigned a true value.
.SH "METHODS"
.IX Header "METHODS"
.SS "set_params \fI\s-1ARGS\s0\fP"
.IX Subsection "set_params ARGS"
Sets or resets object parameters. Takes the same arguments as \fInew()\fR.
.SS "errno"
.IX Subsection "errno"
Returns the last error in numeric form.
Could be called as class method, to retrieve the last error regardless of the instance.
.SS "err"
.IX Subsection "err"
Returns the last error in literal form.
Could be called as class method, to retrieve the last error regardless of the instance.
.SS "sign \fI\s-1ARGS\s0\fP"
.IX Subsection "sign ARGS"
Signs the message, replaces original content with signed content.
.PP
Arguments:
.IP "\s-1CERTIFICATE\s0" 4
.IX Item "CERTIFICATE"
Blessed reference to an OpenCA::X509 object containing the signer's certificate.
.IP "\s-1PRIVATE_KEY\s0" 4
.IX Item "PRIVATE_KEY"
The private key of the signer. Should be a string containing the textual data or a open filehandle reference.
.IP "\s-1KEY_PASSWORD\s0" 4
.IX Item "KEY_PASSWORD"
Password to decrypt the private key, if necessary.
.IP "\s-1INCLUDE_CERTS\s0" 4
.IX Item "INCLUDE_CERTS"
If true, the signer's certificate and the chain of trust (if present) will be
included in the message.
.IP "\s-1NO_COPY_HEADERS\s0" 4
.IX Item "NO_COPY_HEADERS"
If true, the original message headers won't be copied to the external envelope.
.IP "\s-1NO_STRIP_HEADERS\s0" 4
.IX Item "NO_STRIP_HEADERS"
If true, the original message headers won't be stripped off before signing.
.SS "verify \fI\s-1ARGS\s0\fP"
.IX Subsection "verify ARGS"
Verifies the message for integrity and non-repudiation. Can use the embedded
certificate in the message (if present) or a user-supplied expected signer.
.PP
Arguments:
.IP "\s-1USES_EMBEDDED_CERT\s0" 4
.IX Item "USES_EMBEDDED_CERT"
If true, uses the certificate included in the message, if any, instead of
a user-supplied certificate for verifying.
.IP "\s-1CERTIFICATE\s0" 4
.IX Item "CERTIFICATE"
Blessed reference to an OpenCA::X509 object containing the user-supplied
certificate for verifying.
.IP "\s-1NO_COPY_HEADERS\s0" 4
.IX Item "NO_COPY_HEADERS"
If true, the original message headers won't be copied to the extracted verified message.
.SS "encrypt \fI\s-1ARGS\s0\fP"
.IX Subsection "encrypt ARGS"
Encrypts the message, replaces original content with crypted content.
.PP
Arguments:
.IP "\s-1CERTIFICATE\s0" 4
.IX Item "CERTIFICATE"
Blessed reference to an OpenCA::X509 object containing the receiver's certificate.
.IP "\s-1NO_COPY_HEADERS\s0" 4
.IX Item "NO_COPY_HEADERS"
If true, the original message headers won't be copied to the external envelope.
.IP "\s-1NO_STRIP_HEADERS\s0" 4
.IX Item "NO_STRIP_HEADERS"
If true, the original message headers won't be stripped off before encrypting.
.IP "\s-1CIPHER\s0" 4
.IX Item "CIPHER"
Which cipher algorithm to use.
.Sp
Currently supports:
des3, des, rc2\-40, rc2\-64 and rc2\-128.
.SS "decrypt \fI\s-1ARGS\s0\fP"
.IX Subsection "decrypt ARGS"
Decrypts the message, replaces it with original unencrypted data.
.PP
Arguments:
.IP "\s-1CERTIFICATE\s0" 4
.IX Item "CERTIFICATE"
Blessed reference to an OpenCA::X509 object containing the recipient's certificate.
.IP "\s-1PRIVATE_KEY\s0" 4
.IX Item "PRIVATE_KEY"
The private key of the recipient. Should be a string containing the textual data or a open filehandle reference.
.IP "\s-1KEY_PASSWORD\s0" 4
.IX Item "KEY_PASSWORD"
Password to decrypt the private key, if necessary.
.IP "\s-1NO_COPY_HEADERS\s0" 4
.IX Item "NO_COPY_HEADERS"
If true, the original message headers won't be copied to the decrypted message.
.SS "get_mime"
.IX Subsection "get_mime"
Extracts the processed message. If called in scalar context, returns a
MIME::Entity object. In list context, returns a MIME::Entity object and
a filename containing the textual form of the message.
.SS "get_last_signer"
.IX Subsection "get_last_signer"
Returns OpenCA::X509 object of embedded certificate from last verify operation,
if it was successful and contained the signer's certificate.
.PP
Returns undef it there wasn't any certificate saved.
.SS "status"
.IX Subsection "status"
Returns status text from last verify/decrypt operation, or undef if it
was successful.
.SS "status_code"
.IX Subsection "status_code"
Returns status code from last verify/decrypt operation, or zero if it
was successful.
.PP
\&\s-1NOTE:\s0 when status/status_code are set, err/errno are not; and viceversa.
.PP
Currently defined status values after verifying:
.PP
.Vb 6
\&  1100  message not signed
\&  1110  invalid certificate chain
\&  1111  no chain of trust supplied
\&  1112  certificate has expired
\&  1113  certificate is not yet valid
\&  1119  unknown certificate problem
.Ve
.PP
Currently defined status values after decrypting:
.PP
.Vb 2
\&  1300  message not encrypted
\&  1301  this certificate can\*(Aqt decrypt this message
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenCA::OpenSSL, OpenCA::X509, MIME::Tools, MIME::Entity
.SH "AUTHOR"
.IX Header "AUTHOR"
Marti\*'n Ferrari <yo@martinferrari.com.ar>.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Revision:\fR 1.1.1.1 $ \f(CW$Date:\fR 2007/11/07 19:52:53 $
