.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CRL 3"
.TH CRL 3 "2007-11-07" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenCA::CRL \- CRL Management module.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenCA::CRL;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains functions to access CRLs infos. It, as the
OpenCA::X509 module, requires some parameters such as a reference
to an OpenCA::OpenSSL instance. This module provides a \s-1CRL\-\s0>\s-1PERL\s0
Hashes parsing, no specific crypto functions are performed.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "sub new () \- Create a new instance of the Class."
.IX Subsection "sub new () - Create a new instance of the Class."
.Vb 8
\&        Creating a new instance of the module you can provide a
\&        valid crl. As a result the crl will be parsed and stored
\&        in local variable(s) for later usage. You can generate a
\&        new instance of the class either by giving an already
\&        issued CRL (see OpenCA::OpenSSL for documentation) or
\&        even generate a new CRL if you provide the CACERT and
\&        CAKEY. The function will return a self reference. Accepted
\&        parameters are:
\&
\&                SHELL   \- An OpenCA::OpenSSL initialized
\&                          instance;
\&                CRL     \- A valid CRL(*);
\&                INFILE  \- A CRL file(*);
\&                FORMAT  \- Format of the provided CRL. Supported
\&                          are PEM|DER(*);
\&                CAKEY   \- CA private key file(*);
\&                CACERT  \- CA certificate file(*);
\&                DAYS    \- Days the CRL will be valid(*);
\&                EXTS    \- Extentions section (see openssl.cnf
\&                          documentation)(*);
\&
\&        (*) \- Optional Parameters;
\&
\&        EXAMPLE:
\&
\&           my $self\->{crl} = new OpenCA::CRL( SHELL=>$openssl, CRL=>$pemCRL );
\&
\&        NOTE: When you generate a new CRL, you have to provide
\&              BOTH CAKEY and CACERT parameters.
.Ve
.SS "sub initCRL () \- Initialize internal \s-1CRL\s0 parameters."
.IX Subsection "sub initCRL () - Initialize internal CRL parameters."
.Vb 4
\&        Initialize the module with a provided CRL. You can not
\&        generate a new CRL with this function, if you wish to
\&        do so you\*(Aqll have to get a new instance of the class
\&        (see the new() function). Accepted parameters are:
\&
\&                CRL     \- Provided CRL(*);
\&                INFILE  \- A CRL file (one of CRL/INFILE params
\&                          is required)(*);
\&                FORMAT  \- Provided CRL format (PEM|DER)(*);
\&
\&        (*) \- Optional Parameters;
\&
\&        EXAMPLE:
\&
\&                if( not $self\->{crl}\->initCRL(CRL=>$derCRL, FORMAT=>DER)) {
\&                     print "Error!";
\&                }
.Ve
.SS "sub getParsed () \- Retrieve parsed \s-1CRL\s0 list"
.IX Subsection "sub getParsed () - Retrieve parsed CRL list"
.Vb 3
\&        This function returns an HASH structure with the main CRL
\&        data and a list of HASH with SERIAL and DATE of revoked
\&        certificates. Returned value is:
\&
\&                my $ret = { VERSION=>$version,
\&                            ALGORITHM=>$alg,
\&                            ISSUER=>$issuer,
\&                            LAST_UPDATE=>$last,
\&                            NEXT_UPDATE=>$next,
\&                            LIST=>[ @list ] };
\&
\&        Each element of the LIST has the following format:
\&        
\&                my $element = { SERIAL=>$certSerial,
\&                                DATE=>$revDate };
\&
\&
\&        EXAMPLE:
\&
\&                print "VERSION: " . $self\->{crl}\->getParsed()\->{VERSION};
\&
\&                foreach $rev ( @{ $self\->{crl}\->getParsed()\->{LIST} } ) {
\&                    print "SERIAL: " . $rev\->{SERIAL} . "\en";
\&                    print "DATE: " . $rev\->{DATE} . "\en";
\&                }
.Ve
.SS "sub getPEM () \- Get the \s-1CRL\s0 in a \s-1PEM\s0 format."
.IX Subsection "sub getPEM () - Get the CRL in a PEM format."
.Vb 2
\&        This function accept no arguments and returns the CRL in
\&        PEM format.
\&
\&        EXAMPLE:
\&
\&                $pem = $crl\->getPEM();
.Ve
.SS "sub getDER () \- Get the \s-1CRL\s0 in a \s-1DER\s0 format."
.IX Subsection "sub getDER () - Get the CRL in a DER format."
.Vb 2
\&        This function accept no arguments and returns the CRL in
\&        DER format.
\&
\&        EXAMPLE:
\&
\&                $der = $crl\->getDER();
.Ve
.SS "sub getTXT () \- Get the \s-1CRL\s0 in a \s-1TXT\s0 format."
.IX Subsection "sub getTXT () - Get the CRL in a TXT format."
.Vb 2
\&        This function accept no arguments and returns the CRL in
\&        TXT format.
\&
\&        EXAMPLE:
\&
\&                print $crl\->getTXT();
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Massimiliano Pala <madwolf@openca.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenCA::X509, OpenCA::Tools, OpenCA::OpenSSL, OpenCA::REQ,
OpenCA::TRIStateCGI, OpenCA::Configuration
