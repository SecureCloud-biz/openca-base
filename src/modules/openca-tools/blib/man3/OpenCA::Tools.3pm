.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tools 3"
.TH Tools 3 "2007-11-07" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenCA::Tools \- Misc Utilities PERL Extention.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use OpenCA::Tools;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides some tools to easy some standard actions. Current
functions description follows:
.PP
.Vb 11
\&        new             \- Returns a reference to the object.
\&        getDate         \- Returns a Printable date string.
\&        getFile         \- Load data from a file passed as argument.
\&        saveFile        \- Save DATA to FILENAME.
\&        copyFiles       \- Copy file(s).
\&        moveFiles       \- Move file(s).
\&        deleteFiles     \- Delete file(s).
\&        cmpDate         \- Compare two Printable date sting.
\&        isInsidePeriod  \- Check wether give date is within given
\&                          period.
\&        parseDN         \- Parse a given DN returning an HASH value.
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "sub new () \- Build new instance of the class."
.IX Subsection "sub new () - Build new instance of the class."
.Vb 2
\&        This function returns a new instance of the class. No parameters
\&        needed.
\&
\&        EXAMPLE:
\&        
\&                my $tools = new OpenCA::Tools();
.Ve
.SS "sub getDate () \- Get a Printable date string."
.IX Subsection "sub getDate () - Get a Printable date string."
.Vb 2
\&        Returns a string representing current time (GMT or Local).
\&        Accepted parameters are:
\&
\&                FORMAT  \- Use it to get local or GMT time.
\&                          Defaults to GMT.
\&
\&        EXAMPLE:
\&
\&                print $tools\->getDate();
.Ve
.SS "sub copyFiles () \- Copy file(s)."
.IX Subsection "sub copyFiles () - Copy file(s)."
.Vb 3
\&        Use this function to copy file(s). Source path can contain
\&        wildcards (i.e. \*(Aq*\*(Aq) that will be expanded when copying.
\&        Accepted parameters are:
\&
\&                SRC  \- Source full path.
\&                DEST \- Destination path.
\&
\&        EXAMPLE:
\&
\&                $tools\->copyFiles( SRC=>"test.pl", DEST=>"/tmp" );
.Ve
.SS "sub moveFiles () \- Move file(s)."
.IX Subsection "sub moveFiles () - Move file(s)."
.Vb 3
\&        Use this function to move file(s). Source path can contain
\&        wildcards (i.e. \*(Aq*\*(Aq) that will be expanded when copying.
\&        Accepted parameters are:
\&
\&                SRC  \- Source full path.
\&                DEST \- Destination path.
\&
\&        EXAMPLE:
\&
\&                $tools\->moveFiles( SRC=>"test.pl", DEST=>"/tmp" );
.Ve
.SS "sub deleteFiles () \- Delete file(s)."
.IX Subsection "sub deleteFiles () - Delete file(s)."
.Vb 3
\&        Use this function to delete file(s) once provided target
\&        directory and filter.
\&        Accepted parameters are:
\&
\&                DIR    \- Directory containing file(s) to delete.
\&                FILTER \- File filtering(*).
\&
\&        (*) \- Optional parameters;
\&
\&        EXAMPLE:
\&
\&                $tools\->deleteFiles( DIR=>"/tmp", FILTER=>"prova.p*" );
.Ve
.SS "sub cmpDate () \- Compare two date strings."
.IX Subsection "sub cmpDate () - Compare two date strings."
.Vb 6
\&        Use this function to get informations on relationship
\&        between the two provided date strings. Returns integer
\&        values like strcmp() do in C, so if DATE_1 \*(Aqis later\*(Aq
\&        than DATE_2 it returns a positive value. A negative value
\&        is returned in the countrart case while 0 is returned if
\&        the two dates are equal. Accepted parameters:
\&
\&                DATE_1  \- First date string.
\&                DATE_2  \- Second date string.
\&
\&        EXAMPLE:
\&
\&                $tools\->cmpDate( DATA_1=>"$date1", DATA_2=>"$date2" );
.Ve
.SS "sub isInsidePerios \- Check if date is inside a given period."
.IX Subsection "sub isInsidePerios - Check if date is inside a given period."
.Vb 2
\&        This functions returns a true (1) value if the provided
\&        date is within a given period. Accepted parameters are:
\&
\&                DATE     \- Date string to check.
\&                START    \- Date string indicating period\*(Aqs starting(*).
\&                END      \- Date string indicating period\*(Aqs ending(*).
\&
\&        (*) \- Optional parameters;
\&
\&                if( not $tools\->isInsidePeriod( DATE=>$d1, START=>$d2,
\&                                END=>$d3 ) ) {
\&                        print "Non in period... \en";
\&                }
.Ve
.SS "sub parseDN () \- Parse a given \s-1DN.\s0"
.IX Subsection "sub parseDN () - Parse a given DN."
.Vb 2
\&        This function parses a given DN string and returns an HASH
\&        value. Returned structure is as following:
\&
\&                KEY => VALUE,
\&
\&        Only the OU key is instead a list:
\&
\&                OU => [ @list ]
\&
\&        EXAMPLE:
\&
\&                $parsed = $tools\->parseDN( $dn );
\&                print $parsed\->{CN};
\&
\&                foreach $tmp ( @{ $parsed\->{OU} } ) {
\&                        print "OU=$tmp\en";
\&                }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Massimiliano Pala <madwolf@openca.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenCA::Configuration, OpenCA::TRIStateCGI, OpenCA::X509, OpenCA::CRL, OpenCA::REQ, OpenCA::OpenSSL, \fIperl\fR\|(1).
