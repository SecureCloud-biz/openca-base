.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509 3"
.TH X509 3 "2007-11-07" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenCA::X509 \- Perl extension for basic handling x509 Certificates.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenCA::X509;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains all functions needed for handling of X509
certificates. It requires some parameters to be passed such as
a reference to a OpenCA::OpenSSL instance.
.PP
This module provides an interface to X509 structures, no specific
crypto functions are performed (see the OpenCA::OpenSSL module
for this). When not said different, default operational format is
\&\s-1PEM.\s0
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "sub new () \- Create a new instance of the Class."
.IX Subsection "sub new () - Create a new instance of the Class."
.Vb 4
\&        This function creates an instance of the module. If you
\&        provide a certificate it will be parsed and stored in
\&        local variable(s) for later usage. The function will return
\&        a blessed reference.
\&
\&        Accepted parameters are:
\&
\&                SHELL       \- Reference to an initialized
\&                              OpenCA::OpenSSL instance;
\&                DATA        \- Certificate to stored in structure(*);
\&                INFILE      \- Certificate file(*);
\&                FORMAT      \- Format of the provided certificate,
\&                              one of PEM|DER|NET(*);
\&
\&        (*) \- Optional parameter.
\&
\&        EXAMPLE:
\&
\&              $x509 = new OpenCA::X509( SHELL=>$crypto,
\&                                        CERTIFICATE=>$self\->{cert});
.Ve
.SS "sub getParsed () \- Get an hash structure from certificate"
.IX Subsection "sub getParsed () - Get an hash structure from certificate"
.Vb 3
\&        By calling this function you can retrieve a reference to the
\&        parsed certificate (PERL hash). This structure will include,
\&        for example:
\&
\&                $ret\->{SERIAL}          ## Serial Number
\&                $ret\->{DN}              ## Subject DN
\&                $ret\->{EMAIL}           ## Subject e\-mail
\&                $ret\->{CN}              ## Subject CN
\&                $ret\->{OU}              ## Subject OU (list)
\&                $ret\->{O}               ## Subject Organization
\&                $ret\->{L}               ## Subject Locality
\&                $ret\->{S}               ## Subject State
\&                $ret\->{C}               ## Subject Country
\&                $ret\->{ISSUER}          ## Issuer DN
\&                $ret\->{NOTBEFORE}       ## Not Before Date
\&                $ret\->{NOTAFTER}        ## Not After Date (Expiration)
\&                $ret\->{PK_ALGORITHM}    ## Algorithm used (RSA,DSA,..)
\&                $ret\->{KEYSIZE}         ## Modulus (Size in bits)
\&                $ret\->{PUBKEY}          ## Public Key (Base64)
\&                $ret\->{FINGERPRINT}     ## Certificate Fingerprint
\&                $ret\->{HASH}            ## Hash
\&                $ret\->{EXPONENT}        ## Exponent
\&
\&        EXAMPLE:
\&
\&                my $self\->{parsedItem} = $x509\->parseCertificate();
\&
\&                print $self\->{parsedItem}\->{SERIAL};
\&                foreach $ou ( @{ $self\->{parsedItem}\->{OU} } ) {
\&                        print "OU=$ou, ";
\&                }
.Ve
.SS "sub status () \- Get certificate status"
.IX Subsection "sub status () - Get certificate status"
.Vb 3
\&        Get certificate status using provided OpenCA::CRL initialized
\&        reference as argument. Returned status can be Valid, Revoked,
\&        Expired and Unknown. Accepted arguments:
\&
\&                CRL   \- Crl to check certificate status;
\&
\&        The returned structure is:
\&
\&                $status\->{STATUS};
\&                $status\->{REVOKATION_DATE};
\&                $status\->{EXPIRATION_DATE};
\&
\&        EXAMPLE:
\&
\&                my $status = $x509\->status( CRL=>$crl );
\&                print $status\->{STATUS};
.Ve
.SS "sub getPEM () \- Get certificate in \s-1PEM\s0 format."
.IX Subsection "sub getPEM () - Get certificate in PEM format."
.Vb 1
\&        Get certificate in PEM format.
\&
\&        EXAMPLE:
\&
\&                $pem = $x509\->getPEM();
.Ve
.SS "sub getPEMHeader () \- Get certificate's header in \s-1PEM\s0 format."
.IX Subsection "sub getPEMHeader () - Get certificate's header in PEM format."
.Vb 1
\&        Get certificate\*(Aqs header in PEM format.
\&
\&        EXAMPLE:
\&
\&                $pem = $x509\->getPEMHeader();
.Ve
.SS "sub getDER () \- Get certificate in \s-1DER\s0 format."
.IX Subsection "sub getDER () - Get certificate in DER format."
.Vb 1
\&        Get certificate in DER format.
\&
\&        EXAMPLE:
\&
\&                $der = $x509\->getDER();
.Ve
.SS "sub getTXT () \- Get certificate in \s-1TXT\s0 format."
.IX Subsection "sub getTXT () - Get certificate in TXT format."
.Vb 1
\&        Get certificate in TXT format.
\&
\&        EXAMPLE:
\&
\&                $der = $x509\->getTXT();
.Ve
.SS "sub setHeaderAttribute"
.IX Subsection "sub setHeaderAttribute"
.Vb 5
\&        Set an attribute in the header of a certificate.
\&        The certifcate must be in format PEM. The header
\&        is available via getHeader (). Attributes which
\&        are longer than one line are supported
\&        (e.g. PKCS7\-signatures).
\&
\&        EXAMPLE:
\&
\&                $x509\->setHeaderAttribute ( ROLE => "User" );
\&                $cert = $x509\->getPEMHeader ()."\en";
\&                        $x509\->getPEM ();
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Massimiliano Pala <madwolf@openca.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenCA::OpenSSL, OpenCA::CRL, OpenCA::REQ, OpenCA::X509
